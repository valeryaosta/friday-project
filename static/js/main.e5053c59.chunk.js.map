{"version":3,"sources":["api/api.tsx","redux/appReducer.tsx","redux/loginReducer.ts","redux/profileReducer.ts","redux/passwordReducer.ts","redux/registrationReducer.ts","redux/store.ts","common/LinearProgress/LinearProgress.tsx","common/ErrorSnackBar/ErrorSnackBar.tsx","components/Login/Login.tsx","components/Registration/Registration.tsx","components/ForgotPassword/ForgotPassword.tsx","components/CheckEmail/CheckEmail.tsx","components/NewPassword/NewPassword.tsx","components/NumberOfCards/NumberOfCards.tsx","components/Packs/PacksList/PacksList.tsx","assets/logout.svg","components/Profile/UserProfile/ProfileInfo/ProfileInfo.tsx","components/Profile/UserProfile/UserProfile.tsx","components/Profile/Profile.tsx","components/Packs/CardPacks.tsx","components/Cards/Cards.tsx","components/ErrorNotFound/ErrorNotFound.tsx","components/Routes/Routes.tsx","components/NavBar/NavBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["instance","axios","create","baseURL","withCredentials","authAPI","post","email","password","rememberMe","delete","initialAppState","status","error","setAppStatusAC","type","setAppErrorAC","initialSignInState","user","isAuth","setAuthUserDataAC","payload","initialProfileState","initialPasswordState","initialState","newUser","isRedirect","rootReducer","combineReducers","app","state","action","register","login","profile","name","avatar","id","_id","store","createStore","applyMiddleware","thunk","useAppSelector","useSelector","window","LinearProgressBar","Stack","sx","width","color","LinearProgress","position","top","left","right","ErrorSnackBar","errorMessage","dispatch","useDispatch","className","onClick","Login","formik","useFormik","initialValues","validate","values","errors","test","length","onSubmit","console","log","then","res","data","catch","e","response","message","finally","to","PATH","PROFILE","handleSubmit","htmlFor","getFieldProps","touched","FORGOT_PASSWORD","disabled","REGISTER","Registration","LOGIN","ForgotPassword","CheckEmail","NewPassword","NumberOfCards","PacksList","ProfileInfo","alert","info","src","logoutIcon","alt","UserProfile","Profile","useEffect","CardPacks","Cards","ErrorNotFound","Routes","exact","path","render","NEW_PASSWORD","CARD_PACKS","CARDS","NavBar","activeClassName","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5053c59.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'http://localhost:7542/2.0/',\r\n    // baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    withCredentials: true\r\n})\r\n\r\nexport const authAPI = {\r\n    // ping(frontTime: string) {\r\n    //     return instance.post(`/ping`, frontTime)\r\n    // },\r\n    me() {\r\n        return instance.post(`auth/me`)\r\n    },\r\n    register(email: string, password: string) {\r\n        return instance.post(`/auth/register`, {email, password})\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/me`)\r\n    },\r\n\r\n}","// Initial state\r\nconst initialAppState: InitialAppStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n}\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\ntype InitialAppStateType = {\r\n    status: RequestStatusType,\r\n    error: null | string,\r\n}\r\n\r\nexport const appReducer = (state: InitialAppStateType = initialAppState, action: AppActionsType): InitialAppStateType => {\r\n    switch (action.type) {\r\n        case 'app/SET-STATUS' :\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case 'app/SET-ERROR' :\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// AC\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'app/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'app/SET-ERROR', error} as const)\r\n\r\n// types\r\nexport type setAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\n\r\n\r\nexport type AppActionsType = setAppStatusActionType | setAppErrorActionType","import {Dispatch} from \"react\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {\r\n    setAppErrorAC,\r\n    setAppErrorActionType,\r\n    setAppStatusAC,\r\n    setAppStatusActionType,\r\n} from \"./appReducer\";\r\n\r\nimport {setProfileDataActionType} from \"./profileReducer\";\r\n\r\nexport type UserDataType = {\r\n    _id: string,\r\n    email: string,\r\n    name: string,\r\n    avatar: string | null,\r\n    publicCardPacksCount: number,\r\n    created: Date,\r\n    updated: Date,\r\n    isAdmin: boolean,\r\n    verified: boolean,\r\n    rememberMe: boolean\r\n}\r\n\r\nconst initialSignInState = {\r\n    user: {},\r\n    isAuth: false,\r\n}\r\n\r\ntype InitialSignInStateType = {\r\n    user: UserDataType | {},\r\n    isAuth: boolean,\r\n}\r\n\r\nexport const loginReducer = (state: InitialSignInStateType = initialSignInState, action: LoginActionsType): InitialSignInStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET_USER_DATA':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// AC\r\nexport const setAuthUserDataAC = (payload: InitialSignInStateType) => ({\r\n    type: 'login/SET_USER_DATA', payload\r\n} as const)\r\n\r\n// TC\r\n\r\n//auth\r\nexport const authMe = () => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.me()\r\n        .then(res => {\r\n            console.log(res)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAuthUserDataAC({user: res.data, isAuth: true}))\r\n        }).catch((e) => {\r\n        const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n        dispatch(setAppStatusAC('failed'))\r\n        dispatch(setAppErrorAC(error))\r\n    })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC('idle'))\r\n        })\r\n}\r\n\r\n// login\r\nexport const getAuthUserDataTC = (email: string, password: string, rememberMe: boolean) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(email, password, rememberMe)\r\n        .then(res => {\r\n            console.log(res)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAuthUserDataAC({user: res.data, isAuth: true}))\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n            dispatch(setAppStatusAC('failed'))\r\n            dispatch(setAppErrorAC(error))\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC('idle'))\r\n        })\r\n}\r\n\r\n// logout\r\nexport const deleteAuthUserDataTC = () => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAuthUserDataAC({user: {}, isAuth: false}))\r\n            alert(res.data.info)\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n            dispatch(setAppStatusAC('failed'))\r\n            dispatch(setAppErrorAC(error))\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC('idle'))\r\n        })\r\n}\r\n\r\n\r\nexport type setAuthUserDataActionType = ReturnType<typeof setAuthUserDataAC>\r\n\r\nexport type LoginActionsType =\r\n    setAuthUserDataActionType\r\n    | setAppStatusActionType\r\n    | setAppErrorActionType\r\n    | setProfileDataActionType\r\n\r\ntype ThunkDispatch = Dispatch<LoginActionsType>\r\n\r\n\r\n","\r\ntype ProfileDataType = {\r\n    name: string\r\n    avatar: string\r\n    email: string\r\n    id: string\r\n}\r\n\r\n\r\nconst initialProfileState = {}\r\n\r\ntype InitialProfileStateType = typeof initialProfileState\r\n\r\nexport const profileReducer = (state: InitialProfileStateType = initialProfileState, action: ProfileActionsType): InitialProfileStateType => {\r\n    switch (action.type) {\r\n        case 'PROFILE/SET-PROFILE-DATA':\r\n            const {name, avatar, email, id} = action.payload\r\n            return {\r\n                ...state,\r\n                name: name,\r\n                avatar: avatar,\r\n                email: email,\r\n                _id: id\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setProfileDataAC = (payload: ProfileDataType) => ({type: 'PROFILE/SET-PROFILE-DATA', payload} as const)\r\n\r\n\r\nexport type setProfileDataActionType = ReturnType<typeof setProfileDataAC>\r\n\r\n\r\nexport type ProfileActionsType =\r\n    setProfileDataActionType\r\n","import {ActionTypes} from \"./actions\";\n\n\nconst initialPasswordState = {}\n\ntype InitialPasswordStateType = typeof initialPasswordState\n\nexport const passwordReducer = (state: InitialPasswordStateType = initialPasswordState, action: ActionTypes): InitialPasswordStateType => {\n    switch (action.type) {\n        default:\n            return state\n    }\n}","import {Dispatch} from \"react\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {setAppErrorAC, setAppErrorActionType, setAppStatusAC, setAppStatusActionType} from \"./appReducer\";\r\n\r\n\r\nconst initialState = {\r\n    newUser: {},\r\n    isRedirect: false,\r\n}\r\n\r\ntype UserDataType = {\r\n    email: string,\r\n    password: string\r\n}\r\n\r\ntype InitRegistrationStateType = typeof initialState\r\n\r\nexport const registrationReducer = (state: InitRegistrationStateType = initialState, action: RegistrationActionsType): InitRegistrationStateType => {\r\n    switch (action.type) {\r\n        case 'registration/SET_NEW_USER' :\r\n            return {\r\n                ...state,\r\n                newUser: action.payload\r\n            }\r\n        case 'registration/SET_REDIRECT' :\r\n            return {\r\n                ...state,\r\n                isRedirect: action.isRedirect\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// AC\r\nexport const setNewUserAC = (payload: InitRegistrationStateType) => ({\r\n    type: 'registration/SET_NEW_USER',\r\n    payload\r\n} as const)\r\nexport const setRedirectToProfileAC = (isRedirect: boolean) => ({\r\n    type: 'registration/SET_REDIRECT',\r\n    isRedirect\r\n} as const)\r\n\r\n//TC\r\nexport const registerTC = (email: string, password: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.register(email, password)\r\n        .then(response => {\r\n            console.log(response);\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null));\r\n            dispatch(setNewUserAC(response.data));\r\n            dispatch(setRedirectToProfileAC(true));\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console');\r\n            dispatch(setAppStatusAC('failed'))\r\n            dispatch(setAppErrorAC(error));\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC('idle'))\r\n        })\r\n}\r\n\r\n\r\nexport type SetSuccessActionType = ReturnType<typeof setNewUserAC>\r\nexport type SetRedirectActionType = ReturnType<typeof setRedirectToProfileAC>\r\n\r\nexport type RegistrationActionsType =\r\n    SetSuccessActionType\r\n    | SetRedirectActionType\r\n    | setAppStatusActionType\r\n    | setAppErrorActionType\r\n\r\ntype ThunkDispatch = Dispatch<RegistrationActionsType>","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {ThunkDispatch, ThunkAction,} from 'redux-thunk';\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {AppActionsType, appReducer} from \"./appReducer\";\r\nimport {profileReducer} from \"./profileReducer\";\r\nimport {passwordReducer} from \"./passwordReducer\";\r\nimport {LoginActionsType, loginReducer} from \"./loginReducer\";\r\nimport {RegistrationActionsType, registrationReducer} from \"./registrationReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    register: registrationReducer,\r\n    login: loginReducer,\r\n    profile: profileReducer,\r\n    password: passwordReducer,\r\n\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nexport type AppActionType = RegistrationActionsType | AppActionsType | LoginActionsType\r\nexport type TypedDispatch = ThunkDispatch<AppRootStateType, any, AppActionType>\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\n//type AppThunk\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionType>;\r\n\r\n// @ts-ignore\r\nwindow.store = store","import * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\n\r\nexport const LinearProgressBar = () => {\r\n    return (\r\n        <Stack sx={{width: '100%', color: 'grey.500'}}>\r\n            <LinearProgress color=\"secondary\" sx={{position: \"absolute\", top: 0, left: 0, right: 0}}/>\r\n        </Stack>\r\n    );\r\n}","import React from 'react';\r\nimport \"./ErrorSnackBar.css\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppSelector} from \"../../redux/store\";\r\nimport {setAppErrorAC} from \"../../redux/appReducer\";\r\n\r\ntype errorMessageType = {\r\n    errorMessage: string\r\n}\r\n\r\nconst ErrorSnackBar = ({errorMessage}: errorMessageType) => {\r\n    const dispatch = useDispatch();\r\n    const error = useAppSelector(state => state.app.error)\r\n\r\n    const onClickHandler = () => dispatch(setAppErrorAC(null))\r\n\r\n    return (\r\n        <div className={error ? \"showNotification\" : \"closeNotification\"}>\r\n            <div className=\"text\"> {errorMessage} </div>\r\n            <div className=\"close\">\r\n                <div className=\"text cross\" onClick={onClickHandler}>&#10006; </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ErrorSnackBar;","import React from \"react\";\r\nimport \"../Registration/Registration.css\"\r\nimport \"./Login.css\"\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {getAuthUserDataTC} from \"../../redux/loginReducer\";\r\nimport {useAppSelector} from \"../../redux/store\";\r\nimport ErrorSnackBar from \"../../common/ErrorSnackBar/ErrorSnackBar\";\r\nimport {PATH} from \"../Routes/Routes\";\r\n\r\n\r\nexport const Login = () => {\r\n    const status = useAppSelector(state => state.app.status)\r\n    const error = useAppSelector(state => state.app.error)\r\n    const isAuth = useAppSelector(state => state.login.isAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be at least 8 characters'\r\n            }\r\n\r\n            return errors\r\n        },\r\n        onSubmit: (values) => {\r\n            console.log(values)\r\n            dispatch(getAuthUserDataTC(values.email, values.password, values.rememberMe))\r\n        },\r\n    });\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form className='form' onSubmit={formik.handleSubmit}>\r\n                <h1>Learning Cards</h1>\r\n                <h2>Sign In</h2>\r\n                <div>\r\n                    <label htmlFor=\"email\">Email </label>\r\n                    <input type=\"text\"\r\n                           id=\"email\"\r\n                           {...formik.getFieldProps(\"email\")}\r\n                    />\r\n                </div>\r\n                {formik.errors.email && formik.touched.email &&\r\n                    <span className=\"error\">{formik.errors.email}</span>}\r\n                <div>\r\n                    <label htmlFor=\"password\">Password </label>\r\n                    <input type=\"password\"\r\n                           id=\"password\"\r\n                           {...formik.getFieldProps(\"password\")}\r\n                    />\r\n                </div>\r\n                {formik.errors.password && formik.touched.password &&\r\n                    <span className=\"error\">{formik.errors.password}</span>}\r\n\r\n                <div className=\"checkboxWrapper\">\r\n\r\n                    <input type=\"checkbox\"\r\n                           id=\"rememberMe\"\r\n                           {...formik.getFieldProps(\"rememberMe\")}\r\n                    />\r\n                    <label htmlFor=\"rememberMe\">Remember me </label>\r\n                </div>\r\n\r\n                <NavLink to={PATH.FORGOT_PASSWORD} className=\"forgot\">Forgot Password</NavLink>\r\n\r\n                <div className=\"btnLoginWrapper\">\r\n                    <button type=\"submit\" className=\"login\"\r\n                            disabled={!!(formik.errors.email || formik.errors.password)}\r\n                    >Login\r\n                    </button>\r\n                </div>\r\n\r\n                <p className=\"quo\">Don't have an account?</p>\r\n\r\n                <NavLink to={PATH.REGISTER} className=\"regLink\">Sign Up</NavLink>\r\n\r\n                {error && <ErrorSnackBar errorMessage={error}/>}\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}","import React from 'react';\r\nimport './Registration.css';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {registerTC} from \"../../redux/registrationReducer\";\r\nimport {useAppSelector} from \"../../redux/store\";\r\nimport ErrorSnackBar from \"../../common/ErrorSnackBar/ErrorSnackBar\";\r\nimport {PATH} from '../Routes/Routes';\r\n\r\n\r\nexport const Registration = () => {\r\n    const isRedirect = useAppSelector(state => state.register.isRedirect)\r\n    const error = useAppSelector(state => state.app.error)\r\n    const status = useAppSelector(state => state.app.status)\r\n    const isAuth = useAppSelector(state => state.login.isAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be at least 8 characters'\r\n            }\r\n\r\n            return errors\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(registerTC(values.email, values.password))\r\n        },\r\n    });\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    if (isRedirect) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n\r\n        <form className='form' onSubmit={formik.handleSubmit}>\r\n            <h1>Learning Cards</h1>\r\n            <h2>Sign Up</h2>\r\n            <div>\r\n                <label htmlFor=\"email\">Email </label>\r\n                <input type=\"text\"\r\n                       id=\"email\"\r\n                       {...formik.getFieldProps(\"email\")}\r\n                />\r\n            </div>\r\n            {formik.errors.email && formik.touched.email &&\r\n                <span className=\"error\">{formik.errors.email}</span>}\r\n            <div>\r\n                <label htmlFor=\"password\">Password </label>\r\n                <input type=\"password\"\r\n                       id=\"password\"\r\n                       {...formik.getFieldProps(\"password\")}\r\n                />\r\n            </div>\r\n            {formik.errors.password && formik.touched.password &&\r\n                <span className=\"error\">{formik.errors.password}</span>}\r\n\r\n            {/*            <div>\r\n                <label htmlFor=\"password\">Confirm password </label>\r\n                <input type=\"password\"\r\n                       id=\"password\"\r\n                       name=\"password\"\r\n                       onChange={formik.handleChange}\r\n                       value={formik.values.password}\r\n                />\r\n            </div>*/}\r\n\r\n            <div className=\"btnWrapper\">\r\n                <button className=\"cancel\">Cancel</button>\r\n                <button type=\"submit\" className=\"register\"\r\n                        disabled={!!(formik.errors.email || formik.errors.password)}\r\n                >\r\n                    Register\r\n                </button>\r\n            </div>\r\n\r\n            {error && <ErrorSnackBar errorMessage={error}/>}\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n}","import React from \"react\";\r\n\r\nexport const ForgotPassword = () => {\r\n    return (\r\n        <div>\r\n            Forgot Password\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nconst CheckEmail = () => {\r\n    return (\r\n        <div>\r\n            Check Email\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CheckEmail;","import React from \"react\";\n\nexport const NewPassword = () => {\n    return (\n        <div>\n            New password\n        </div>\n    )\n}","import React from 'react';\r\nimport \"./NumberOfCards.css\"\r\n\r\nconst NumberOfCards = () => {\r\n    return (\r\n        <div className=\"toggleCardsWrapper\">\r\n            <span>Number of cards</span>\r\n            <br/>\r\n            <span>toggler of cards</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NumberOfCards;","import React from 'react';\r\nimport \"./PacksList.css\"\r\n\r\nconst PacksList = () => {\r\n    return (\r\n        <div className=\"packsListWrapper\">\r\n            <h2>My packs list</h2>\r\n            <br/>\r\n            <span>search bar</span>\r\n            <br/>\r\n            <span>table</span>\r\n            <br/>\r\n            <span>pagination</span>\r\n            <br/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PacksList;","export default __webpack_public_path__ + \"static/media/logout.f0f14280.svg\";","import React from 'react';\r\nimport \"./ProfileInfo.css\"\r\nimport logoutIcon from \"../../../../assets/logout.svg\"\r\nimport {useDispatch} from \"react-redux\";\r\nimport {deleteAuthUserDataTC} from \"../../../../redux/loginReducer\";\r\n\r\nconst ProfileInfo = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onLogout = () => {\r\n        dispatch(deleteAuthUserDataTC())\r\n    }\r\n\r\n    return (\r\n        <div className=\"profileDataWrapper\">\r\n            <span>Profile</span>\r\n            <a className=\"logout\" onClick={onLogout}>\r\n                <img src={logoutIcon} alt=\"logout\"/>\r\n            </a>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport NumberOfCards from '../../NumberOfCards/NumberOfCards';\r\nimport PacksList from '../../Packs/PacksList/PacksList';\r\nimport \"../../Registration/Registration.css\"\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport \"./UserProfile.css\"\r\n\r\nconst UserProfile = () => {\r\n    return (\r\n        <div className=\"profileWrapper\">\r\n            <div className=\"left\">\r\n                <ProfileInfo/>\r\n                <NumberOfCards/>\r\n            </div>\r\n            <div className=\"right\">\r\n                <PacksList/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserProfile;","import React, {useEffect} from \"react\";\r\nimport {useAppSelector} from \"../../redux/store\";\r\nimport UserProfile from \"./UserProfile/UserProfile\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../Routes/Routes\";\r\n\r\nexport const Profile = () => {\r\n    const isAuth = useAppSelector(state => state.login.isAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (isAuth) {\r\n            // dispatch(getAuthUserDataTC())\r\n        }\r\n    }, [dispatch])\r\n    if (!isAuth) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <UserProfile/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nconst CardPacks = () => {\r\n    return (\r\n        <div>\r\n            Card Packs\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardPacks;","import React from 'react';\r\n\r\nconst Cards = () => {\r\n    return (\r\n        <div>\r\n            Cards\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cards;","import React from \"react\";\n\nexport const ErrorNotFound =()=>{\n    return(\n        <div>\n            Not found\n        </div>\n    )\n}","import React from 'react';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport {Login} from \"../Login/Login\";\r\nimport {Registration} from \"../Registration/Registration\";\r\nimport {ForgotPassword} from \"../ForgotPassword/ForgotPassword\";\r\nimport CheckEmail from \"../CheckEmail/CheckEmail\";\r\nimport {NewPassword} from \"../NewPassword/NewPassword\";\r\nimport {Profile} from \"../Profile/Profile\";\r\nimport CardPacks from \"../Packs/CardPacks\";\r\nimport Cards from \"../Cards/Cards\";\r\nimport {ErrorNotFound} from \"../ErrorNotFound/ErrorNotFound\";\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <Switch>\r\n            <Route exact path={'/'} render={() => <Login/>}/>\r\n            <Route exact path={PATH.LOGIN} render={() => <Login/>}/>\r\n            <Route exact path={PATH.REGISTER} render={() => <Registration/>}/>\r\n            <Route exact path={PATH.FORGOT_PASSWORD} render={() => <ForgotPassword/>}/>\r\n            <Route exact path={'/checkEmail'} render={() => <CheckEmail/>}/>\r\n            <Route exact path={PATH.NEW_PASSWORD} render={() => <NewPassword/>}/>\r\n            <Route exact path={PATH.PROFILE} render={() => <Profile/>}/>\r\n            <Route exact path={PATH.CARD_PACKS} render={() => <CardPacks/>}/>\r\n            <Route exact path={PATH.CARDS} render={() => <Cards/>}/>\r\n            <Route exact path={'/*'} render={() => <ErrorNotFound/>}/>\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n\r\nexport const PATH = {\r\n    LOGIN: '/login',\r\n    REGISTER: '/registration',\r\n    FORGOT_PASSWORD: '/forgot-password',\r\n    NEW_PASSWORD: '/set-new-password/:token?',\r\n    PROFILE: '/profile',\r\n    CARD_PACKS: '/card_packs',\r\n    CARDS: '/cards',\r\n}","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from '../Routes/Routes';\r\nimport \"./NavBar.css\";\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <div className=\"links\">\r\n            <NavLink to={PATH.LOGIN} activeClassName=\"activeLink\">Sign in </NavLink>\r\n            <NavLink to={PATH.REGISTER} activeClassName=\"activeLink\">Sign up </NavLink>\r\n            <NavLink to={PATH.FORGOT_PASSWORD} activeClassName=\"activeLink\">Forgot Password </NavLink>\r\n            <NavLink to={'/checkEmail'} activeClassName=\"activeLink\">Check Email </NavLink>\r\n            <NavLink to={PATH.NEW_PASSWORD} activeClassName=\"activeLink\">New Password </NavLink>\r\n            <NavLink to={PATH.PROFILE} activeClassName=\"activeLink\">Profile </NavLink>\r\n            <NavLink to={PATH.CARD_PACKS} activeClassName=\"activeLink\">Packs </NavLink>\r\n            <NavLink to={PATH.CARDS} activeClassName=\"activeLink\">Cards </NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {authMe} from \"./redux/loginReducer\";\r\nimport {useAppSelector} from './redux/store';\r\nimport {LinearProgressBar} from \"./common/LinearProgress/LinearProgress\";\r\nimport NavBar from \"./components/NavBar/NavBar\";\r\nimport Routes from './components/Routes/Routes';\r\n\r\nconst App = () => {\r\n    const isAuth = useAppSelector(state => state.login.isAuth)\r\n    const status = useAppSelector(state => state.app.status)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(authMe())\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <NavBar/>\r\n            <Routes/>\r\n            {status === 'loading' && <LinearProgressBar/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <HashRouter>\n          <Provider store={store}>\n              <App/>\n          </Provider>\n      </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}