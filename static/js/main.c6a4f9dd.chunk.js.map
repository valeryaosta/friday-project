{"version":3,"sources":["redux/appReducer.tsx","redux/profileReducer.ts","api/api.tsx","redux/passwordReducer.ts","redux/loginReducer.ts","redux/registrationReducer.ts","redux/store.ts","common/LinearProgress/LinearProgress.tsx","common/ErrorSnackBar/ErrorSnackBar.tsx","components/Login/Login.tsx","components/Registration/Registration.tsx","components/ForgotPassword/ForgotPassword.tsx","assets/checkEmailIcon.svg","components/CheckEmail/CheckEmail.tsx","components/NewPassword/NewPassword.tsx","components/NumberOfCards/NumberOfCards.tsx","components/Packs/PacksList/PacksList.tsx","assets/logout.svg","components/Profile/UserProfile/ProfileInfo/ProfileInfo.tsx","components/Profile/UserProfile/UserProfile.tsx","components/Profile/Profile.tsx","components/Packs/CardPacks.tsx","components/Cards/Cards.tsx","components/ErrorNotFound/ErrorNotFound.tsx","components/Routes/Routes.tsx","components/NavBar/NavBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialAppState","status","error","isInit","setAppStatusAC","type","setAppErrorAC","initialProfileState","instance","axios","create","baseURL","withCredentials","authAPI","post","email","password","rememberMe","delete","passwordAPI","resetPasswordToken","initialPasswordState","success","initialSignInState","user","isAuth","setAuthUserDataAC","payload","initialState","newUser","isRedirect","rootReducer","combineReducers","app","state","action","register","profile","name","avatar","id","_id","login","store","createStore","applyMiddleware","thunk","useAppSelector","useSelector","window","LinearProgressBar","Stack","sx","width","color","LinearProgress","position","top","left","right","ErrorSnackBar","errorMessage","dispatch","useDispatch","className","onClick","Login","formik","useFormik","initialValues","validate","values","errors","test","length","onSubmit","console","log","then","res","data","catch","e","response","message","useEffect","to","PATH","PROFILE","handleSubmit","htmlFor","getFieldProps","touched","FORGOT_PASSWORD","disabled","REGISTER","Registration","finally","LOGIN","ForgotPassword","emailEntered","forgotPasswordAC","CHECK_EMAIL","CheckEmail","src","checkEmailIcon","alt","NewPassword","token","useParams","tokenName","alert","info","NumberOfCards","PacksList","ProfileInfo","logoutIcon","UserProfile","Profile","CardPacks","Cards","ErrorNotFound","Routes","exact","path","render","NEW_PASSWORD","CARD_PACKS","CARDS","NavBar","activeClassName","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c6a4f9dd.chunk.js","sourcesContent":["const initialAppState: InitialAppStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInit: false,\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\ntype InitialAppStateType = {\r\n    status: RequestStatusType,\r\n    error: null | string,\r\n    isInit: boolean,\r\n}\r\n\r\nexport const appReducer = (state: InitialAppStateType = initialAppState, action: AppActionsType): InitialAppStateType => {\r\n    switch (action.type) {\r\n        case 'app/SET-STATUS' :\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case 'app/SET-ERROR' :\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        case 'app/IS_INITIALIZED': {\r\n            return {\r\n                ...state,\r\n                isInit: action.isInit\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// AC\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'app/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'app/SET-ERROR', error} as const)\r\nexport const setIsInitApp = (isInit: boolean) => ({type: 'app/IS_INITIALIZED', isInit} as const)\r\n\r\n// types\r\nexport type setAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type setIsInitAppActionType = ReturnType<typeof setIsInitApp>\r\n\r\n\r\nexport type AppActionsType = setAppStatusActionType | setAppErrorActionType | setIsInitAppActionType","\r\ntype ProfileDataType = {\r\n    name: string\r\n    avatar: string\r\n    email: string\r\n    id: string\r\n}\r\n\r\nconst initialProfileState = {}\r\n\r\ntype InitialProfileStateType = typeof initialProfileState\r\n\r\nexport const profileReducer = (state: InitialProfileStateType = initialProfileState, action: ProfileActionsType): InitialProfileStateType => {\r\n    switch (action.type) {\r\n        case 'PROFILE/SET-PROFILE-DATA':\r\n            const {name, avatar, email, id} = action.payload\r\n            return {\r\n                ...state,\r\n                name: name,\r\n                avatar: avatar,\r\n                email: email,\r\n                _id: id\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setProfileDataAC = (payload: ProfileDataType) => ({type: 'PROFILE/SET-PROFILE-DATA', payload} as const)\r\n\r\n\r\nexport type setProfileDataActionType = ReturnType<typeof setProfileDataAC>\r\n\r\n\r\nexport type ProfileActionsType =\r\n    setProfileDataActionType\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    // baseURL: 'http://localhost:7542/2.0/',\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    withCredentials: true\r\n})\r\n\r\nexport const authAPI = {\r\n    // ping(frontTime: string) {\r\n    //     return instance.post(`/ping`, frontTime)\r\n    // },\r\n    me() {\r\n        return instance.post(`auth/me`)\r\n    },\r\n    register(email: string, password: string) {\r\n        return instance.post(`/auth/register`, {email, password})\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/me`)\r\n    }\r\n}\r\n\r\nexport const passwordAPI = {\r\n    forgot(email: string) {\r\n        return instance.post(`auth/forgot`, {email})\r\n    },\r\n    setNewPassword(password: string, resetPasswordToken: string) {\r\n        return instance.post(`auth/set-new-password`, {password, resetPasswordToken})\r\n    }\r\n}\r\n\r\n\r\nexport type ForgotDataType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\n\r\nexport type RecoverResponseType = {\r\n    answer: boolean,\r\n    html: boolean,\r\n    info: string,\r\n    success: boolean\r\n}","import {Dispatch} from \"react\";\nimport {setAppErrorAC, setAppErrorActionType, setAppStatusAC, setAppStatusActionType} from \"./appReducer\";\nimport {passwordAPI} from \"../api/api\";\n\nconst initialPasswordState = {\n    email: '',\n    success: false\n}\n\ntype InitialPasswordStateType = typeof initialPasswordState\n\nexport const passwordReducer = (state: InitialPasswordStateType = initialPasswordState, action: PasswordActionsType): InitialPasswordStateType => {\n    switch (action.type) {\n        case 'password/FORGOT' :\n            return {\n                ...state,\n                email: action.email\n            }\n        case 'password/SET_NEW_PASSWORD_SUCCESS' :\n            return {\n                ...state,\n                success: action.success\n            }\n        default:\n            return state\n    }\n}\n\n// AC\nexport const forgotPasswordAC = (email: string) => ({\n    type: 'password/FORGOT', email\n} as const)\n\nexport const setNewPasswordSuccessAC = (success: boolean) => ({\n    type: 'password/SET_NEW_PASSWORD_SUCCESS',\n    success\n} as const)\n\n// TC\nexport const forgotPasswordTC = (email: string) => (dispatch: ThunkDispatch) => {\n    dispatch(setAppStatusAC('loading'))\n    passwordAPI.forgot(email)\n        .then(() => {\n            dispatch(setAppStatusAC('succeeded'))\n            dispatch(forgotPasswordAC(email))\n        })\n        .catch((e) => {\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\n            dispatch(setAppStatusAC('failed'))\n            dispatch(setAppErrorAC(error))\n        })\n        .finally(() => {\n            dispatch(setAppStatusAC('idle'))\n        })\n}\n\nexport const setNewPasswordTC = (password: string, resetPasswordToken: string) => (dispatch: ThunkDispatch) => {\n    dispatch(setAppStatusAC('loading'))\n    passwordAPI.setNewPassword(password, resetPasswordToken)\n        .then(res => {\n            dispatch(setAppStatusAC('succeeded'))\n            dispatch(setNewPasswordSuccessAC(true))\n            alert(res.data.info + ' you will be redirected to login page')\n        })\n        .catch((e) => {\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\n            dispatch(setAppStatusAC('failed'))\n            dispatch(setAppErrorAC(error))\n        })\n}\n\n\nexport type forgotPasswordActionType = ReturnType<typeof forgotPasswordAC>\nexport type setNewPasswordSuccessActionType = ReturnType<typeof setNewPasswordSuccessAC>\n\nexport type PasswordActionsType =\n    forgotPasswordActionType\n    | setAppStatusActionType\n    | setAppErrorActionType\n    | setNewPasswordSuccessActionType\n\ntype ThunkDispatch = Dispatch<PasswordActionsType>\n","import {Dispatch} from \"react\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {\r\n    setAppErrorAC,\r\n    setAppErrorActionType,\r\n    setAppStatusAC,\r\n    setAppStatusActionType,\r\n    setIsInitApp, setIsInitAppActionType,\r\n} from \"./appReducer\";\r\n\r\nimport {setProfileDataActionType} from \"./profileReducer\";\r\n\r\nexport type UserDataType = {\r\n    _id: string,\r\n    email: string,\r\n    name: string,\r\n    avatar: string | null,\r\n    publicCardPacksCount: number,\r\n    created: Date,\r\n    updated: Date,\r\n    isAdmin: boolean,\r\n    verified: boolean,\r\n    rememberMe: boolean\r\n}\r\n\r\nconst initialSignInState = {\r\n    user: {},\r\n    isAuth: false,\r\n}\r\n\r\ntype InitialSignInStateType = {\r\n    user: UserDataType | {},\r\n    isAuth: boolean,\r\n}\r\n\r\nexport const loginReducer = (state: InitialSignInStateType = initialSignInState, action: LoginActionsType): InitialSignInStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET_USER_DATA':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// AC\r\nexport const setAuthUserDataAC = (payload: InitialSignInStateType) => ({type: 'login/SET_USER_DATA', payload} as const)\r\n\r\n// TC\r\n//auth\r\nexport const authMe = () => (dispatch: any) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(setIsInitApp(true))\r\n    authAPI.me()\r\n        .then(res => {\r\n            // console.log(res)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAuthUserDataAC({user: res.data, isAuth: true}))\r\n        }).catch((e) => {\r\n        const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n        dispatch(setAppStatusAC('failed'))\r\n        dispatch(setAppErrorAC(error))\r\n    })\r\n}\r\n\r\n// login\r\nexport const getAuthUserDataTC = (email: string, password: string, rememberMe: boolean) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(email, password, rememberMe)\r\n        .then(res => {\r\n            // console.log(res)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAuthUserDataAC({user: res.data, isAuth: true}))\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n            dispatch(setAppStatusAC('failed'))\r\n            dispatch(setAppErrorAC(error))\r\n        })\r\n}\r\n\r\n// logout\r\nexport const deleteAuthUserDataTC = () => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAuthUserDataAC({user: {}, isAuth: false}))\r\n            alert(res.data.info)\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n            dispatch(setAppStatusAC('failed'))\r\n            dispatch(setAppErrorAC(error))\r\n        })\r\n}\r\n\r\n\r\nexport type setAuthUserDataActionType = ReturnType<typeof setAuthUserDataAC>\r\n\r\nexport type LoginActionsType =\r\n    setAuthUserDataActionType\r\n    | setAppStatusActionType\r\n    | setAppErrorActionType\r\n    | setProfileDataActionType\r\n    | setIsInitAppActionType\r\n\r\ntype ThunkDispatch = Dispatch<LoginActionsType>\r\n\r\n\r\n","import {Dispatch} from \"react\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {setAppErrorAC, setAppErrorActionType, setAppStatusAC, setAppStatusActionType} from \"./appReducer\";\r\n\r\n\r\nconst initialState = {\r\n    newUser: {},\r\n    isRedirect: false,\r\n}\r\n\r\ntype UserDataType = {\r\n    email: string,\r\n    password: string\r\n}\r\n\r\ntype InitRegistrationStateType = typeof initialState\r\n\r\nexport const registrationReducer = (state: InitRegistrationStateType = initialState, action: RegistrationActionsType): InitRegistrationStateType => {\r\n    switch (action.type) {\r\n        case 'registration/SET_NEW_USER' :\r\n            return {\r\n                ...state,\r\n                newUser: action.payload\r\n            }\r\n        case 'registration/SET_REDIRECT' :\r\n            return {\r\n                ...state,\r\n                isRedirect: action.isRedirect\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// AC\r\nexport const setNewUserAC = (payload: InitRegistrationStateType) => ({\r\n    type: 'registration/SET_NEW_USER',\r\n    payload\r\n} as const)\r\nexport const setRedirectToProfileAC = (isRedirect: boolean) => ({\r\n    type: 'registration/SET_REDIRECT',\r\n    isRedirect\r\n} as const)\r\n\r\n//TC\r\nexport const registerTC = (email: string, password: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.register(email, password)\r\n        .then(response => {\r\n            console.log(response);\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null));\r\n            dispatch(setNewUserAC(response.data));\r\n            dispatch(setRedirectToProfileAC(true));\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console');\r\n            dispatch(setAppStatusAC('failed'))\r\n            dispatch(setAppErrorAC(error));\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC('idle'))\r\n        })\r\n}\r\n\r\n\r\nexport type SetSuccessActionType = ReturnType<typeof setNewUserAC>\r\nexport type SetRedirectActionType = ReturnType<typeof setRedirectToProfileAC>\r\n\r\nexport type RegistrationActionsType =\r\n    SetSuccessActionType\r\n    | SetRedirectActionType\r\n    | setAppStatusActionType\r\n    | setAppErrorActionType\r\n\r\ntype ThunkDispatch = Dispatch<RegistrationActionsType>","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {ThunkDispatch, ThunkAction,} from 'redux-thunk';\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {AppActionsType, appReducer} from \"./appReducer\";\r\nimport {profileReducer} from \"./profileReducer\";\r\nimport {PasswordActionsType, passwordReducer} from \"./passwordReducer\";\r\nimport {LoginActionsType, loginReducer} from \"./loginReducer\";\r\nimport {RegistrationActionsType, registrationReducer} from \"./registrationReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    register: registrationReducer,\r\n    profile: profileReducer,\r\n    password: passwordReducer,\r\n    login: loginReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nexport type AppActionType = RegistrationActionsType | AppActionsType | LoginActionsType | PasswordActionsType\r\nexport type TypedDispatch = ThunkDispatch<AppRootStateType, any, AppActionType>\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\n//type AppThunk\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionType>;\r\n\r\n// @ts-ignore\r\nwindow.store = store","import * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\n\r\nexport const LinearProgressBar = () => {\r\n    return (\r\n        <Stack sx={{width: '100%', color: 'grey.500'}}>\r\n            <LinearProgress color=\"secondary\" sx={{position: \"absolute\", top: 0, left: 0, right: 0}}/>\r\n        </Stack>\r\n    );\r\n}","import React from 'react';\r\nimport \"./ErrorSnackBar.css\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppSelector} from \"../../redux/store\";\r\nimport {setAppErrorAC} from \"../../redux/appReducer\";\r\n\r\ntype errorMessageType = {\r\n    errorMessage: string\r\n}\r\n\r\nconst ErrorSnackBar = ({errorMessage}: errorMessageType) => {\r\n    const dispatch = useDispatch();\r\n    const error = useAppSelector(state => state.app.error)\r\n\r\n    const onClickHandler = () => dispatch(setAppErrorAC(null))\r\n\r\n    return (\r\n        <div className={error ? \"showNotification\" : \"closeNotification\"}>\r\n            <div className=\"text\"> {errorMessage} </div>\r\n            <div className=\"close\">\r\n                <div className=\"text cross\" onClick={onClickHandler}>&#10006; </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ErrorSnackBar;","import React, {useEffect} from \"react\";\r\nimport \"../Registration/Registration.css\"\r\nimport \"./Login.css\"\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {authMe, getAuthUserDataTC} from \"../../redux/loginReducer\";\r\nimport {useAppSelector} from \"../../redux/store\";\r\nimport ErrorSnackBar from \"../../common/ErrorSnackBar/ErrorSnackBar\";\r\nimport {PATH} from \"../Routes/Routes\";\r\nimport {LinearProgressBar} from \"../../common/LinearProgress/LinearProgress\";\r\n\r\n\r\nexport const Login = () => {\r\n    const error = useAppSelector(state => state.app.error)\r\n    const isAuth = useAppSelector(state => state.login.isAuth)\r\n    const isInit = useAppSelector(state => state.app.isInit)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be at least 8 characters'\r\n            }\r\n\r\n            return errors\r\n        },\r\n        onSubmit: (values) => {\r\n            console.log(values)\r\n            dispatch(getAuthUserDataTC(values.email, values.password, values.rememberMe))\r\n        },\r\n    });\r\n\r\n    useEffect(() => {\r\n        dispatch(authMe())\r\n    }, [dispatch])\r\n\r\n    if (!isInit) {\r\n        return <LinearProgressBar/>\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form className='form' onSubmit={formik.handleSubmit}>\r\n                <h1>Learning Cards</h1>\r\n                <h2>Sign In</h2>\r\n                <div>\r\n                    <label htmlFor=\"email\">Email </label>\r\n                    <input type=\"text\"\r\n                           id=\"email\"\r\n                           {...formik.getFieldProps(\"email\")}\r\n                    />\r\n                </div>\r\n                {formik.errors.email && formik.touched.email &&\r\n                    <span className=\"error\">{formik.errors.email}</span>}\r\n                <div>\r\n                    <label htmlFor=\"password\">Password </label>\r\n                    <input type=\"password\"\r\n                           id=\"password\"\r\n                           {...formik.getFieldProps(\"password\")}\r\n                    />\r\n                </div>\r\n                {formik.errors.password && formik.touched.password &&\r\n                    <span className=\"error\">{formik.errors.password}</span>}\r\n\r\n                <div className=\"checkboxWrapper\">\r\n\r\n                    <input type=\"checkbox\"\r\n                           id=\"rememberMe\"\r\n                           {...formik.getFieldProps(\"rememberMe\")}\r\n                    />\r\n                    <label htmlFor=\"rememberMe\">Remember me </label>\r\n                </div>\r\n\r\n                <NavLink to={PATH.FORGOT_PASSWORD} className=\"forgot\">Forgot Password</NavLink>\r\n\r\n                <div className=\"btnLoginWrapper\">\r\n                    <button type=\"submit\" className=\"login\"\r\n                            disabled={!!(formik.errors.email || formik.errors.password)}\r\n                    >Login\r\n                    </button>\r\n                </div>\r\n\r\n                <p className=\"quo\">Don't have an account?</p>\r\n\r\n                <NavLink to={PATH.REGISTER} className=\"regLink\">Sign Up</NavLink>\r\n\r\n                {error && <ErrorSnackBar errorMessage={error}/>}\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}","import React from 'react';\r\nimport './Registration.css';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {registerTC} from \"../../redux/registrationReducer\";\r\nimport {useAppSelector} from \"../../redux/store\";\r\nimport ErrorSnackBar from \"../../common/ErrorSnackBar/ErrorSnackBar\";\r\nimport {PATH} from '../Routes/Routes';\r\n\r\n\r\nexport const Registration = () => {\r\n    const isRedirect = useAppSelector(state => state.register.isRedirect)\r\n    const error = useAppSelector(state => state.app.error)\r\n    const status = useAppSelector(state => state.app.status)\r\n    const isAuth = useAppSelector(state => state.login.isAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be at least 8 characters'\r\n            }\r\n\r\n            return errors\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(registerTC(values.email, values.password))\r\n        },\r\n    });\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    if (isRedirect) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n\r\n        <form className='form' onSubmit={formik.handleSubmit}>\r\n            <h1>Learning Cards</h1>\r\n            <h2>Sign Up</h2>\r\n            <div>\r\n                <label htmlFor=\"email\">Email </label>\r\n                <input type=\"text\"\r\n                       id=\"email\"\r\n                       {...formik.getFieldProps(\"email\")}\r\n                />\r\n            </div>\r\n            {formik.errors.email && formik.touched.email &&\r\n                <span className=\"error\">{formik.errors.email}</span>}\r\n            <div>\r\n                <label htmlFor=\"password\">Password </label>\r\n                <input type=\"password\"\r\n                       id=\"password\"\r\n                       {...formik.getFieldProps(\"password\")}\r\n                />\r\n            </div>\r\n            {formik.errors.password && formik.touched.password &&\r\n                <span className=\"error\">{formik.errors.password}</span>}\r\n\r\n            {/*            <div>\r\n                <label htmlFor=\"password\">Confirm password </label>\r\n                <input type=\"password\"\r\n                       id=\"password\"\r\n                       name=\"password\"\r\n                       onChange={formik.handleChange}\r\n                       value={formik.values.password}\r\n                />\r\n            </div>*/}\r\n\r\n            <div className=\"btnWrapper\">\r\n                <button className=\"cancel\">Cancel</button>\r\n                <button type=\"submit\" className=\"register\"\r\n                        disabled={!!(formik.errors.email || formik.errors.password)}\r\n                >\r\n                    Register\r\n                </button>\r\n            </div>\r\n\r\n            {error && <ErrorSnackBar errorMessage={error}/>}\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n}","import React from \"react\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../Routes/Routes\";\r\nimport ErrorSnackBar from \"../../common/ErrorSnackBar/ErrorSnackBar\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppSelector} from \"../../redux/store\";\r\n\r\nimport \"../Login/Login.css\";\r\nimport \"./ForgotPassword.css\";\r\nimport {forgotPasswordTC} from \"../../redux/passwordReducer\";\r\n\r\nexport const ForgotPassword = () => {\r\n    const error = useAppSelector(state => state.app.error)\r\n    const emailEntered = useAppSelector((state) => state.password.email)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n\r\n            return errors\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(forgotPasswordTC(values.email))\r\n        },\r\n    });\r\n\r\n    if (emailEntered) {\r\n        return <Redirect to={PATH.CHECK_EMAIL}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form className='form' onSubmit={formik.handleSubmit}>\r\n                <h1>Learning Cards</h1>\r\n                <h2 className=\"forPass\">Forgot your password?</h2>\r\n                <div>\r\n                    <label htmlFor=\"email\">Email </label>\r\n                    <input type=\"text\"\r\n                           id=\"email\"\r\n                           {...formik.getFieldProps(\"email\")}\r\n                    />\r\n                </div>\r\n                {formik.errors.email && formik.touched.email &&\r\n                    <span className=\"error\">{formik.errors.email}</span>}\r\n\r\n                <p className=\"instr\">Enter your email address and we will send you further instructions</p>\r\n\r\n                <div className=\"btnLoginWrapper\">\r\n                    <button type=\"submit\" className=\"login\"\r\n                            disabled={!!(formik.errors.email)}>\r\n                        Send Instructions\r\n                    </button>\r\n                </div>\r\n\r\n                <p className=\"quo\">Did you remember your password?</p>\r\n\r\n                <NavLink to={PATH.LOGIN} className=\"regLink\">Try logging in</NavLink>\r\n\r\n                {error && <ErrorSnackBar errorMessage={error}/>}\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n}","export default __webpack_public_path__ + \"static/media/checkEmailIcon.bc3a4042.svg\";","import React from 'react';\r\nimport {useAppSelector} from \"../../redux/store\";\r\nimport checkEmailIcon from \"../../assets/checkEmailIcon.svg\"\r\nimport \"../Registration/Registration.css\"\r\nimport \"./CheckEmail.css\"\r\n\r\nconst CheckEmail = () => {\r\n    const email = useAppSelector(state => state.password.email)\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"form\">\r\n                <h1>Learning Cards</h1>\r\n                <div className=\"checkEmail\">\r\n                    <img src={checkEmailIcon} alt='check icon'/>\r\n                </div>\r\n\r\n                <h2>Check Email</h2>\r\n\r\n                <p className=\"quo emailInstr\">We’ve sent an Email with instructions to\r\n                    <span>{email}</span>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CheckEmail;","import React from \"react\";\nimport ErrorSnackBar from \"../../common/ErrorSnackBar/ErrorSnackBar\";\nimport {useFormik} from \"formik\";\nimport {useAppSelector} from \"../../redux/store\";\nimport \"../Registration/Registration.css\"\nimport \"../CheckEmail/CheckEmail.css\"\nimport {Redirect, useParams} from \"react-router-dom\";\nimport {setNewPasswordTC} from \"../../redux/passwordReducer\";\nimport {useDispatch} from \"react-redux\";\nimport {PATH} from \"../Routes/Routes\";\n\nexport const NewPassword = () => {\n    const email = useAppSelector(state => state.password.email)\n    const error = useAppSelector(state => state.app.error)\n    const success = useAppSelector(state => state.password.success)\n\n    const {token} = useParams<Record<string, string>>()\n    const tokenName = token ? token : ''\n\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            password: '',\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {}\n\n            if (!values.password) {\n                errors.password = 'Required'\n            } else if (values.password.length < 8) {\n                errors.password = 'Password must be at least 8 characters'\n            }\n\n            return errors\n        },\n        onSubmit: (values) => {\n            dispatch(setNewPasswordTC(values.password, tokenName))\n        },\n    });\n\n    if (success) {\n        return <Redirect to={PATH.LOGIN}/>\n    }\n\n    return (\n        <div>\n            <form className='form' onSubmit={formik.handleSubmit}>\n                <h1>Learning Cards</h1>\n                <h2 className=\"forPass\">Create new password</h2>\n\n                <div>\n                    <label htmlFor=\"password\">Password </label>\n                    <input type=\"password\"\n                           id=\"password\"\n                           {...formik.getFieldProps(\"password\")}\n                    />\n                </div>\n                {formik.errors.password && formik.touched.password &&\n                    <span className=\"error\">{formik.errors.password}</span>}\n\n\n                <p className=\"quo emailInstr left\">\n                    Create new password and we will send you further instructions to\n                    <span>\n                        {email}\n                    </span>\n                </p>\n\n                <div className=\"btnLoginWrapper\">\n                    <button type=\"submit\" className=\"login\"\n                            disabled={!!(formik.errors.password)}>\n                        Create new password\n                    </button>\n                </div>\n\n                {error && <ErrorSnackBar errorMessage={error}/>}\n            </form>\n        </div>\n    )\n}\n\ntype FormikErrorType = {\n    password?: string\n}","import React from 'react';\r\nimport \"./NumberOfCards.css\"\r\n\r\nconst NumberOfCards = () => {\r\n    return (\r\n        <div className=\"toggleCardsWrapper\">\r\n            <span>Number of cards</span>\r\n            <br/>\r\n            <span>toggler of cards</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NumberOfCards;","import React from 'react';\r\nimport \"./PacksList.css\"\r\n\r\nconst PacksList = () => {\r\n    return (\r\n        <div className=\"packsListWrapper\">\r\n            <h2>My packs list</h2>\r\n            <br/>\r\n            <span>search bar</span>\r\n            <br/>\r\n            <span>table</span>\r\n            <br/>\r\n            <span>pagination</span>\r\n            <br/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PacksList;","export default __webpack_public_path__ + \"static/media/logout.f0f14280.svg\";","import React from 'react';\r\nimport \"./ProfileInfo.css\"\r\nimport logoutIcon from \"../../../../assets/logout.svg\"\r\nimport {useDispatch} from \"react-redux\";\r\nimport {deleteAuthUserDataTC} from \"../../../../redux/loginReducer\";\r\n\r\nconst ProfileInfo = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onLogout = () => {\r\n        dispatch(deleteAuthUserDataTC())\r\n    }\r\n\r\n    return (\r\n        <div className=\"profileDataWrapper\">\r\n            <span>Profile</span>\r\n            <a className=\"logout\" onClick={onLogout}>\r\n                <img src={logoutIcon} alt=\"logout\"/>\r\n            </a>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport NumberOfCards from '../../NumberOfCards/NumberOfCards';\r\nimport PacksList from '../../Packs/PacksList/PacksList';\r\nimport \"../../Registration/Registration.css\"\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport \"./UserProfile.css\"\r\n\r\nconst UserProfile = () => {\r\n    return (\r\n        <div className=\"profileWrapper\">\r\n            <div className=\"left\">\r\n                <ProfileInfo/>\r\n                <NumberOfCards/>\r\n            </div>\r\n            <div className=\"right\">\r\n                <PacksList/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserProfile;","import React, {useEffect} from \"react\";\r\nimport {useAppSelector} from \"../../redux/store\";\r\nimport UserProfile from \"./UserProfile/UserProfile\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../Routes/Routes\";\r\n\r\nexport const Profile = () => {\r\n    const isAuth = useAppSelector(state => state.login.isAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (isAuth) {\r\n            // dispatch(getAuthUserDataTC())\r\n        }\r\n    }, [dispatch])\r\n    if (!isAuth) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <UserProfile/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nconst CardPacks = () => {\r\n    return (\r\n        <div>\r\n            Card Packs\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardPacks;","import React from 'react';\r\n\r\nconst Cards = () => {\r\n    return (\r\n        <div>\r\n            Cards\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cards;","import React from \"react\";\n\nexport const ErrorNotFound =()=>{\n    return(\n        <div>\n            Not found\n        </div>\n    )\n}","import React from 'react';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport {Login} from \"../Login/Login\";\r\nimport {Registration} from \"../Registration/Registration\";\r\nimport {ForgotPassword} from \"../ForgotPassword/ForgotPassword\";\r\nimport CheckEmail from \"../CheckEmail/CheckEmail\";\r\nimport {NewPassword} from \"../NewPassword/NewPassword\";\r\nimport {Profile} from \"../Profile/Profile\";\r\nimport CardPacks from \"../Packs/CardPacks\";\r\nimport Cards from \"../Cards/Cards\";\r\nimport {ErrorNotFound} from \"../ErrorNotFound/ErrorNotFound\";\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <Switch>\r\n            <Route exact path={'/'} render={() => <Login/>}/>\r\n            <Route exact path={PATH.LOGIN} render={() => <Login/>}/>\r\n            <Route exact path={PATH.REGISTER} render={() => <Registration/>}/>\r\n            <Route exact path={PATH.FORGOT_PASSWORD} render={() => <ForgotPassword/>}/>\r\n            <Route exact path={PATH.CHECK_EMAIL} render={() => <CheckEmail/>}/>\r\n            <Route exact path={PATH.NEW_PASSWORD} render={() => <NewPassword/>}/>\r\n            <Route exact path={PATH.PROFILE} render={() => <Profile/>}/>\r\n            <Route exact path={PATH.CARD_PACKS} render={() => <CardPacks/>}/>\r\n            <Route exact path={PATH.CARDS} render={() => <Cards/>}/>\r\n            <Route exact path={'/*'} render={() => <ErrorNotFound/>}/>\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n\r\nexport const PATH = {\r\n    LOGIN: '/login',\r\n    REGISTER: '/registration',\r\n    FORGOT_PASSWORD: '/forgot-password',\r\n    CHECK_EMAIL: '/check-email',\r\n    NEW_PASSWORD: '/set-new-password/:token',\r\n    PROFILE: '/profile',\r\n    CARD_PACKS: '/card_packs',\r\n    CARDS: '/cards',\r\n}","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from '../Routes/Routes';\r\nimport \"./NavBar.css\";\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <div className=\"links\">\r\n            <NavLink to={PATH.LOGIN} activeClassName=\"activeLink\">Sign in </NavLink>\r\n            <NavLink to={PATH.REGISTER} activeClassName=\"activeLink\">Sign up </NavLink>\r\n            <NavLink to={PATH.FORGOT_PASSWORD} activeClassName=\"activeLink\">Forgot Password </NavLink>\r\n            <NavLink to={PATH.NEW_PASSWORD} activeClassName=\"activeLink\">New Password </NavLink>\r\n            <NavLink to={PATH.PROFILE} activeClassName=\"activeLink\">Profile </NavLink>\r\n            <NavLink to={PATH.CARD_PACKS} activeClassName=\"activeLink\">Packs </NavLink>\r\n            <NavLink to={PATH.CARDS} activeClassName=\"activeLink\">Cards </NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {useAppSelector} from './redux/store';\r\nimport {LinearProgressBar} from \"./common/LinearProgress/LinearProgress\";\r\nimport NavBar from \"./components/NavBar/NavBar\";\r\nimport Routes from './components/Routes/Routes';\r\n\r\nconst App = () => {\r\n    const status = useAppSelector(state => state.app.status)\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <NavBar/>\r\n            <Routes/>\r\n            {status === 'loading' && <LinearProgressBar/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}